package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TransactionContract extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b50610fc5806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806315ae2aa8146100515780638046f84a1461006f57806385a1344214610084578063d6030de2146100a4575b600080fd5b6100596100b7565b6040516100669190610ce6565b60405180910390f35b61008261007d366004610deb565b6102e0565b005b610097610092366004610e85565b6103c9565b6040516100669190610e9e565b6100596100b2366004610eb8565b610680565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156102d757838290600052602060002090600502016040518060a00160405290816000820154815260200160018201805461011890610ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461014490610ef5565b80156101915780601f1061016657610100808354040283529160200191610191565b820191906000526020600020905b81548152906001019060200180831161017457829003601f168201915b505050505081526020016002820180546101aa90610ef5565b80601f01602080910402602001604051908101604052809291908181526020018280546101d690610ef5565b80156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050815260200160038201805461023c90610ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461026890610ef5565b80156102b55780601f1061028a576101008083540402835291602001916102b5565b820191906000526020600020905b81548152906001019060200180831161029857829003601f168201915b50505050508152602001600482015481525050815260200190600101906100db565b50505050905090565b6040805160a081018252868152602080820187815292820186905260608201859052608082018490526000805460018101825590805282517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56360059092029182019081559351805193948594909361037c937f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401920190610b97565b5060408201518051610398916002840191602090910190610b97565b50606082015180516103b4916003840191602090910190610b97565b50608082015181600401555050505050505050565b6103fb6040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b6000808054905090506104366040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b60005b82811015610678576000818154811061045457610454610f30565b906000526020600020906005020160000154851415610666576000818154811061048057610480610f30565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820180546104b390610ef5565b80601f01602080910402602001604051908101604052809291908181526020018280546104df90610ef5565b801561052c5780601f106105015761010080835404028352916020019161052c565b820191906000526020600020905b81548152906001019060200180831161050f57829003601f168201915b5050505050815260200160028201805461054590610ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461057190610ef5565b80156105be5780601f10610593576101008083540402835291602001916105be565b820191906000526020600020905b8154815290600101906020018083116105a157829003601f168201915b505050505081526020016003820180546105d790610ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461060390610ef5565b80156106505780601f1061062557610100808354040283529160200191610650565b820191906000526020600020905b81548152906001019060200180831161063357829003601f168201915b5050505050815260200160048201548152505091505b8061067081610f5c565b915050610439565b509392505050565b60008054606091805b828110156107745760008082815481106106a5576106a5610f30565b906000526020600020906005020160020180546106c190610ef5565b80601f01602080910402602001604051908101604052809291908181526020018280546106ed90610ef5565b801561073a5780601f1061070f5761010080835404028352916020019161073a565b820191906000526020600020905b81548152906001019060200180831161071d57829003601f168201915b5050505050905061074b8682610b03565b600114156107615761075e600184610f77565b92505b508061076c81610f5c565b915050610689565b5060008167ffffffffffffffff81111561079057610790610d48565b6040519080825280602002602001820160405280156107f357816020015b6107e06040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b8152602001906001900390816107ae5790505b5090506000805b84811015610af857600080828154811061081657610816610f30565b9060005260206000209060050201600201805461083290610ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461085e90610ef5565b80156108ab5780601f10610880576101008083540402835291602001916108ab565b820191906000526020600020905b81548152906001019060200180831161088e57829003601f168201915b505050505090506108bc8882610b03565b60011415610ae557600082815481106108d7576108d7610f30565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201805461090a90610ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461093690610ef5565b80156109835780601f1061095857610100808354040283529160200191610983565b820191906000526020600020905b81548152906001019060200180831161096657829003601f168201915b5050505050815260200160028201805461099c90610ef5565b80601f01602080910402602001604051908101604052809291908181526020018280546109c890610ef5565b8015610a155780601f106109ea57610100808354040283529160200191610a15565b820191906000526020600020905b8154815290600101906020018083116109f857829003601f168201915b50505050508152602001600382018054610a2e90610ef5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5a90610ef5565b8015610aa75780601f10610a7c57610100808354040283529160200191610aa7565b820191906000526020600020905b815481529060010190602001808311610a8a57829003601f168201915b50505050508152602001600482015481525050848481518110610acc57610acc610f30565b6020908102919091010152610ae2600184610f77565b92505b5080610af081610f5c565b9150506107fa565b509095945050505050565b60008151835114610b1657506000610b91565b60005b8351811015610b8b57828181518110610b3457610b34610f30565b602001015160f81c60f81b6001600160f81b031916848281518110610b5b57610b5b610f30565b01602001516001600160f81b03191614610b79576000915050610b91565b80610b8381610f5c565b915050610b19565b50600190505b92915050565b828054610ba390610ef5565b90600052602060002090601f016020900481019282610bc55760008555610c0b565b82601f10610bde57805160ff1916838001178555610c0b565b82800160010185558215610c0b579182015b82811115610c0b578251825591602001919060010190610bf0565b50610c17929150610c1b565b5090565b5b80821115610c175760008155600101610c1c565b6000815180845260005b81811015610c5657602081850181015186830182015201610c3a565b81811115610c68576000602083870101525b50601f01601f19169290920160200192915050565b805182526000602082015160a06020850152610c9c60a0850182610c30565b905060408301518482036040860152610cb58282610c30565b91505060608301518482036060860152610ccf8282610c30565b915050608083015160808501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d3b57603f19888603018452610d29858351610c7d565b94509285019290850190600101610d0d565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d6f57600080fd5b813567ffffffffffffffff80821115610d8a57610d8a610d48565b604051601f8301601f19908116603f01168101908282118183101715610db257610db2610d48565b81604052838152866020858801011115610dcb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215610e0357600080fd5b85359450602086013567ffffffffffffffff80821115610e2257600080fd5b610e2e89838a01610d5e565b95506040880135915080821115610e4457600080fd5b610e5089838a01610d5e565b94506060880135915080821115610e6657600080fd5b50610e7388828901610d5e565b95989497509295608001359392505050565b600060208284031215610e9757600080fd5b5035919050565b602081526000610eb16020830184610c7d565b9392505050565b600060208284031215610eca57600080fd5b813567ffffffffffffffff811115610ee157600080fd5b610eed84828501610d5e565b949350505050565b600181811c90821680610f0957607f821691505b60208210811415610f2a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610f7057610f70610f46565b5060010190565b60008219821115610f8a57610f8a610f46565b50019056fea264697066735822122087b7f57d4ea605f498f36572ef87922a1c63721a0f33933fc2df64262373cd9964736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {""};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[0]}],\"inputs\":[],\"name\":\"query_all_transaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"purchase_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transaction_date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct TransactionContract.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"selector\":[363735720,3771045356],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"}],\"name\":\"query_owner_transaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"purchase_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transaction_date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct TransactionContract.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"selector\":[3590524386,1361478032],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"query_pid_transaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"purchase_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transaction_date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct TransactionContract.Transaction\",\"name\":\"\",\"type\":\"tuple\"}],\"selector\":[2241934402,2658946175],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"purchase_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transaction_date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"record_transaction\",\"outputs\":[],\"selector\":[2152134730,1519003608],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_QUERY_ALL_TRANSACTION = "query_all_transaction";

    public static final String FUNC_QUERY_OWNER_TRANSACTION = "query_owner_transaction";

    public static final String FUNC_QUERY_PID_TRANSACTION = "query_pid_transaction";

    public static final String FUNC_RECORD_TRANSACTION = "record_transaction";

    protected TransactionContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<Transaction> query_all_transaction() throws ContractException {
        final Function function = new Function(FUNC_QUERY_ALL_TRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Transaction>>() {}));
        return executeCallWithSingleValueReturn(function, List.class);
    }

    public List<Transaction> query_owner_transaction(String owner) throws
            ContractException {
        final Function function = new Function(FUNC_QUERY_OWNER_TRANSACTION, 
                Arrays.<Type>asList(new Utf8String(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Transaction>>() {}));
        return executeCallWithSingleValueReturn(function, List.class);
    }

    public Transaction query_pid_transaction(BigInteger pid) throws ContractException {
        final Function function = new Function(FUNC_QUERY_PID_TRANSACTION, 
                Arrays.<Type>asList(new Uint256(pid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Transaction>() {}));
        return executeCallWithSingleValueReturn(function, Transaction.class);
    }

    public TransactionReceipt record_transaction(BigInteger pid, String purchase_username,
            String owner, String transaction_date, BigInteger price) {
        final Function function = new Function(
                FUNC_RECORD_TRANSACTION, 
                Arrays.<Type>asList(new Uint256(pid),
                new Utf8String(purchase_username),
                new Utf8String(owner),
                new Utf8String(transaction_date),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRecord_transaction(BigInteger pid,
            String purchase_username, String owner, String transaction_date, BigInteger price) {
        final Function function = new Function(
                FUNC_RECORD_TRANSACTION, 
                Arrays.<Type>asList(new Uint256(pid),
                new Utf8String(purchase_username),
                new Utf8String(owner),
                new Utf8String(transaction_date),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String record_transaction(BigInteger pid, String purchase_username, String owner,
            String transaction_date, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RECORD_TRANSACTION, 
                Arrays.<Type>asList(new Uint256(pid),
                new Utf8String(purchase_username),
                new Utf8String(owner),
                new Utf8String(transaction_date),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<BigInteger, String, String, String, BigInteger> getRecord_transactionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RECORD_TRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, String, String, String, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public static TransactionContract load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new TransactionContract(contractAddress, client, credential);
    }

    public static TransactionContract deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(TransactionContract.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class Transaction extends DynamicStruct {
        public BigInteger pid;

        public String purchase_username;

        public String owner;

        public String transaction_date;

        public BigInteger price;

        public Transaction(Uint256 pid, Utf8String purchase_username, Utf8String owner,
                Utf8String transaction_date, Uint256 price) {
            super(pid,purchase_username,owner,transaction_date,price);
            this.pid = pid.getValue();
            this.purchase_username = purchase_username.getValue();
            this.owner = owner.getValue();
            this.transaction_date = transaction_date.getValue();
            this.price = price.getValue();
        }

        public Transaction(BigInteger pid, String purchase_username, String owner,
                String transaction_date, BigInteger price) {
            super(new Uint256(pid),new Utf8String(purchase_username),new Utf8String(owner),new Utf8String(transaction_date),new Uint256(price));
            this.pid = pid;
            this.purchase_username = purchase_username;
            this.owner = owner;
            this.transaction_date = transaction_date;
            this.price = price;
        }
    }
}
