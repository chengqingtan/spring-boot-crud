package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TransactionContract extends Contract {
    public static final String[] BINARY_ARRAY = {""};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {""};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[0]}],\"inputs\":[],\"name\":\"query_all_transaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"purchase_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transaction_date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct TransactionContract.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"selector\":[363735720,3771045356],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"}],\"name\":\"query_owner_transaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"purchase_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transaction_date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct TransactionContract.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"selector\":[3590524386,1361478032],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"query_pid_transaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"purchase_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transaction_date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct TransactionContract.Transaction\",\"name\":\"\",\"type\":\"tuple\"}],\"selector\":[2241934402,2658946175],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"purchase_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transaction_date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"record_transaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[2152134730,1519003608],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_QUERY_ALL_TRANSACTION = "query_all_transaction";

    public static final String FUNC_QUERY_OWNER_TRANSACTION = "query_owner_transaction";

    public static final String FUNC_QUERY_PID_TRANSACTION = "query_pid_transaction";

    public static final String FUNC_RECORD_TRANSACTION = "record_transaction";

    protected TransactionContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<Transaction> query_all_transaction() throws ContractException {
        final Function function = new Function(FUNC_QUERY_ALL_TRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Transaction>>() {}));
        return executeCallWithSingleValueReturn(function, List.class);
    }

    public TransactionReceipt query_owner_transaction(String owner) {
        final Function function = new Function(
                FUNC_QUERY_OWNER_TRANSACTION, 
                Arrays.<Type>asList(new Utf8String(owner)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForQuery_owner_transaction(String owner) {
        final Function function = new Function(
                FUNC_QUERY_OWNER_TRANSACTION, 
                Arrays.<Type>asList(new Utf8String(owner)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String query_owner_transaction(String owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERY_OWNER_TRANSACTION, 
                Arrays.<Type>asList(new Utf8String(owner)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getQuery_owner_transactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERY_OWNER_TRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<DynamicArray<Transaction>> getQuery_owner_transactionOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERY_OWNER_TRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Transaction>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<DynamicArray<Transaction>>(

                new DynamicArray<>(Transaction.class,(List<Transaction>) results.get(0).getValue())
                );
    }

    public Transaction query_pid_transaction(BigInteger pid) throws ContractException {
        final Function function = new Function(FUNC_QUERY_PID_TRANSACTION, 
                Arrays.<Type>asList(new Uint256(pid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Transaction>() {}));
        return executeCallWithSingleValueReturn(function, Transaction.class);
    }

    public TransactionReceipt record_transaction(BigInteger pid, String purchase_username,
            String owner, String transaction_date, BigInteger price) {
        final Function function = new Function(
                FUNC_RECORD_TRANSACTION, 
                Arrays.<Type>asList(new Uint256(pid),
                new Utf8String(purchase_username),
                new Utf8String(owner),
                new Utf8String(transaction_date),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRecord_transaction(BigInteger pid,
            String purchase_username, String owner, String transaction_date, BigInteger price) {
        final Function function = new Function(
                FUNC_RECORD_TRANSACTION, 
                Arrays.<Type>asList(new Uint256(pid),
                new Utf8String(purchase_username),
                new Utf8String(owner),
                new Utf8String(transaction_date),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String record_transaction(BigInteger pid, String purchase_username, String owner,
            String transaction_date, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RECORD_TRANSACTION, 
                Arrays.<Type>asList(new Uint256(pid),
                new Utf8String(purchase_username),
                new Utf8String(owner),
                new Utf8String(transaction_date),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<BigInteger, String, String, String, BigInteger> getRecord_transactionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RECORD_TRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, String, String, String, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple1<Boolean> getRecord_transactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_RECORD_TRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public static TransactionContract load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new TransactionContract(contractAddress, client, credential);
    }

    public static TransactionContract deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(TransactionContract.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class Transaction extends DynamicStruct {
        public BigInteger pid;

        public String purchase_username;

        public String owner;

        public String transaction_date;

        public BigInteger price;

        public Transaction(Uint256 pid, Utf8String purchase_username, Utf8String owner,
                Utf8String transaction_date, Uint256 price) {
            super(pid,purchase_username,owner,transaction_date,price);
            this.pid = pid.getValue();
            this.purchase_username = purchase_username.getValue();
            this.owner = owner.getValue();
            this.transaction_date = transaction_date.getValue();
            this.price = price.getValue();
        }

        public Transaction(BigInteger pid, String purchase_username, String owner,
                String transaction_date, BigInteger price) {
            super(new Uint256(pid),new Utf8String(purchase_username),new Utf8String(owner),new Utf8String(transaction_date),new Uint256(price));
            this.pid = pid;
            this.purchase_username = purchase_username;
            this.owner = owner;
            this.transaction_date = transaction_date;
            this.price = price;
        }
    }
}
